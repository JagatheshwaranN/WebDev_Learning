Void HTML Elements
==================
1. <br /> - Also known as Self closing element.
2. <hr /> - Also known as Self closing element.

Types of Style sheets
=====================
1. CSS
2. SASS (Syntactically Awesome Style Sheets)
3. LESS (Leaner Style Sheets)

'Hakon Wium Lie' is a father of Cascading Style Sheet.

1px => 1/96th inch [0.26mm]
1pt => 1/72nd inch [0.35mm]
1em => 100% of parent
1rem => 100% of root

CSS Specificity Order
=====================
1. Id
2. Attribute
3. Class
4. Element

Type Order
=========
1. Inline
2. Internal
3. External
 
Importance Keyword
==================
color: red;
color: green !important; // It has the highest priority order.

Combine CSS Selectors
=====================
1. Grouping Selectors
selector1, selector2 {
    color: green;
}

2. Child Selector 
Child = Apply to direct child of left side
parent > child {
    color: firebrick;
}

3. Descendent Selector
Descendant = Apply to a descendant of left side
ancestor descendant {
    color: blue;
}

4. Chaining Selectors
Chaining = Apply where ALL selectors are true
selectorselector {
    color: seagreen;
}

5. Combining Combiners
ancestor   chaining
selector selectorselector {
    font-size: 2rem;
}

CSS Positions
=============
1. Static [Default HTML flow]
2. Relative [Position relative to default position]
3. Absolute [Position relative to nearest positioned ancestor or top-left corner of webpage]
    a. Z-index [Used to move the element before / after the other element]
    b. if value is -1, it will be after. If value is 0, it will be before.
4. Fixed [Position relative to top left corner or browser window]

CSS Display
===========
1. inline
Note: When we have display property of an element is set to inline, then we can't change
the size of the element such as width / height.
2. block
Note: When we have display property of an element is set to block, then the element can
take up the entire width on the page and next element would go in next line.
3. inline-block
Note: When we have display property of an element is set to inline-block, then block allows
us to set the height & width. inline makesure that element is in same line.
4. none
Note: When we set the display as none, it will make the element to disappear.

CSS Float
=========
float: left [Allows the element to float towards left.]
clear: left [Allows the element to bypass the float value by clearing the same.]

Responsive Websites
===================
We can achieve responsiveness using below 4 options.
1. Media queries
2. CSS Flexbox
3. CSS Grid
4. External Frameworks e.g. Bootstrap

Media Query
===========
@media(max-midth: 600px) {
    <!-- CSS for screens below or equal to 600px wide -->
}

CSS Grid
========
.grid-container {
    display: grid;
    grid-template-columns: 1fr 1fr; [fr - equal fraction]
    grid-template-rows: 100px 200px 200px; [It denotes 3 rows will be of different sizes.]
    gap: 30px;
}

CSS Flexbox
===========
Flexbox allows us to define the 1D layout either horizontally or vertically.

.flex-container {
    display: flex;
}

.card {
    background: blue;
    border: 30px solid white;
    height: 100px;
    flex: 1; [It will make each of the cards to have equal width distribution]
}

.first {
    flex: 2; [It will have the twice the width of the unmodified cards.]
}

.second {
    flex: 0.5; [It will have the half size of the width of the unmodified cards.]
}

Bootstrap Framework
===================
The reason why its called as Framework is, becuase its external and not something
built in CSS like Grid / Flexbox.
We are using the other people code in our project using Bootstrap. What the team
did was, they wrote the bunch of classes, they put different rules for different
selectors.
The Bootstrap team code will applied to our code, by simply putting in the Bootstap
framework and then adding a class name.
Bootstrap is built on top of Flexbox.

Example
=======
<div class="container">
<div class="row">
<div class="card col-6">Card</div>
<div class="card col-2">Card</div>
<div class="card col-4">Card</div>
</div>
</div>

Media Query Usages
==================
Single
======
@media(max-midth: 600px) {
    <!-- CSS for screens below or equal to 600px wide -->
}

Combine
=======
@media(min-width: 600px) and (max-width: 900px) {
    <!-- CSS for screens between 600px and 900px wide -->
}

Device
======
@media screen(orientation: landscape) {
    <!-- Styles for landscape orientation -->
}

Reference - https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_media_queries/Using_media_queries

CSS Flexbox
===========
Float can be used for Magazine-style layouts.
Flexbox/Grid/Bootstrap can be used for overall page structure.

<div class="container">
<div class="one"><p>..</p></div>
<div class="two"><p>..</p></div>
<div class="three"><p>..</p></div>
</div>

.container {
    display: flex;
    gap: 10px;
}

A DIV element is by default have block display property of full width.
A SPAN element is by default have inline display property.
A P element is by default have block display property of full width.
An IMG element is by default have inline display property.

display: flex / inline-flex
When we set display: flex, the whole width will be occupied. But, when we
set the display: inline-flex, then the width space of actual element size
is occupied.

CSS Flex Direction
==================
1. row [We can have the flexbox to order row wise]
2. column [We can have the flexbox to order column wise]

We have 2 axes, one is Main axis, and the other one is cross axis.

When we set the direction to row, then main axis flow from left to right.
The cross axis flows perpendicular to the main axis.

When we set the direction to column, then main axis flow from top to bottom.
The cross axis flows perpendicular to the main axis.

flex-basis: 100px, when we set it in row direction, it increases the width.
flex-basis: 100px, when we set it in column direction, it increases the height.

CSS Flex Layout
===============
Its a child property.
1. order: 0;  [Example: order: 10;]
By default, the order property is set to 0. If its set some value, then the element
will move next to the element less than the value element.

2. flex-wrap: nowrap / wrap;
Its a parent property which means it set on the container.
When nowrap is set, the element will stored on same line.
When wrap is set, the element will stored on line and then move to the next line.
wrap will work when the size of the screen reduces.

Note: reversewrap, it is used to wrap the elements from top / start.

3. Justify-Content: flex-start / flex-end / center / space-between / space-around / space-evenly
This property is set on parent, which means it set to the container.

4. align-items: flex-start / flex-end / center / base-line / stretch
   height: 70vh
Justify-Content works in a main axis, which x-axis. When we set the align-items, it works in
y-axis. align-items have to be used with height property. 'height:70vh'

Important Note: When flex-wrap is set to 'wrap' then align-items will not work as per our undestanding.
Instead we can use below align-content property.

5. align-content: center 
   flex-wrap: wrap
   height: 70vh

CSS Sizing
==========
The CSS Flex sizing works based on the below principle.
content width < width < flex-basis < min-width / max-width

The max-width is determined from the longest line.

|---------------------------------------|
The best programming school in the world.

The min-width is determined from the longest word.
|---------|
 The best 
programming 
school in 
the world.

Flex Container
display: flex;
gap: 10px;

Flex Items
width: 100px; [When below flex-basis is set, then width is overriden]
------------------
flex-basis: 200px; [When below max-width is set, then flex-basis is overriden]
------------------
max-width: 100px; [When below min-width is set, then max-width is overriden]
------------------
min-width: 300px;

Grow & Shrink
=============
flex-basis: 100px;
flex-grow: 0;
flex-shrink: 0;

flex-basis: 100px;
flex-grow: 1;
flex-shrink: 0;

flex-basis: 100px;
flex-grow: 0;
flex-shrink: 1;

flex-basis: 100px; [Ignored]
flex-grow: 1;
flex-shrink: 1;

flex-basis: 0;
flex-grow: 1;
flex-shrink: 1;

Short form
==========
flex: 1 1 0
first -> grow
second -> shrink
third -> basis

further simplified
==================
flex: 1
grow, shrink are 1
basis is 0.

Grid
====

Flex Vs Grid
============
1. Flex is suitable for 1D alignment.
1. Grid is suitable for 2D alignment.

2. We can have Flex-box inside Grid.
2. We can have Grid inside Flexbox.

Grid Properties
===============
.grid-container {
    display: grid;
    grid-template-rows: 100px auto;
    grid-template-columns: 200px auto;
}

Note:
=====
The auto keyword on a row helps to make the row size to fit the content except the first row which is fixed.
The auto keyword on a column helps to make the column size to 100% of the witdh except the first column.

References
==========
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://appbrewery.github.io/flexboxfroggy/